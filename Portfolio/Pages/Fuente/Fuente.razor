@page "/Fuente"
@page "/Fuente/{id}"
@using Services;
@inject IFuenteService FuenteService

@if (Id == null)
{
    <h3>Create a new Fuente</h3>
}
else
{
    <h3>Detalles de la Fuente: </h3>
}

<EditForm Model="fuente" OnSubmit="HadleSubmit">
    <div>
        <label for="cadenaFuente">Cadena Fuente</label>
        <InputTextArea id="cadenaFuente" @bind-Value="fuente.CadenaFuente" class="form-control" spellcheck="false" rows="@(fuente.CadenaFuente.Length/120  )"></InputTextArea>
    </div>
    <br />
    <button type="submit" class="btn btn-primary rz-ripple rz-shadow-2 rz-border-radius-6 ">@btnText</button>
    <button type="button" class="btn btn-danger rz-ripple rz-shadow-2 rz-border-radius-6" @onclick="DeleteFuente">Delete Fuente</button>
</EditForm>

@if (Id != null)
{
    <CadenaCodificada Fuente="@fuente"></CadenaCodificada>

    <Histograma Letras="@fuente.Letras"></Histograma>

    <Decodificador Fuente="@fuente"></Decodificador>

    <TablaLetras Letras="@fuente.Letras"></TablaLetras>    
}



@code {
    [Parameter]
    public string? Id { get; set; }

    string btnText = string.Empty;

    Models.Fuente fuente = new();


    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Fuente" : "Update Fuente";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            fuente = await FuenteService.GetSingleFuente((string) Id);
            fuente = new Models.Fuente(fuente.CadenaFuente);
        }
    }

    async Task HadleSubmit()
    {
        if (Id == null)
        {
            await FuenteService.CreateFuente(fuente);
        }
        else
        {
            await FuenteService.UpdateFuente(fuente, (string)Id);
        }
    }

    async Task DeleteFuente()
    {
        await FuenteService.DeleteFuente(fuente.IdFuente);
    }
}
