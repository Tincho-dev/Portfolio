@using Model;
@inject IProfessionalService service
@using Services;

<div class="experience">
    <TitleComponent Title="Experience"></TitleComponent>
    @foreach (var experience in _experiences.OrderByDescending(e => e.YearStart))
    {
        <h3>
            <span class="experience-icon"></span>
            <span>@experience.Name.ToUpper()</span>
        </h3>
        <h3>
            @experience.YearStart - @(experience.YearFinish.HasValue ? experience.YearFinish.Value.ToString() : "Present")
        </h3>
        <div>@experience.Role</div>
        <div>
            @foreach (var skill in _skills.Where(s => s.ExperienceId == experience.Id))
            {
                <div>
                    <span class="skill-icon"></span>
                    <span>@skill.Value</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int ProfessionalId { get; set; }
    private List<Experience>? _experiences;
    private List<Skill>? _skills;

    protected override async Task OnInitializedAsync()
    {
        _experiences = await service.GetExperiencesFromProfessionalAsync(ProfessionalId);
        _skills = new List<Skill>();

        foreach (var experience in _experiences)
        {
            _skills.AddRange((IEnumerable<Skill>)await service.GetSkillsFromExperienceAsync(experience.Id));
        }

        base.OnInitialized();
    }
}
